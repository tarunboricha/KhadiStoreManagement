@model KhadiStore.Application.DTOs.CreateReturnDto
@{
    ViewData["Title"] = "Process Return";
    var sale = ViewBag.Sale as KhadiStore.Application.DTOs.SaleDto;
    var existingReturns = ViewBag.ExistingReturns as List<KhadiStore.Application.DTOs.ReturnDto>;
}

<div class="row mb-4">
    <div class="col">
        <h1 class="page-title text-primary">
            <i class="fas fa-undo-alt me-2 text-warning"></i>
            Process Return - @sale?.InvoiceNumber
            <small class="text-muted fs-6 ms-2">| रिटर्न प्रोसेसिंग</small>
        </h1>
    </div>
    <div class="col-auto">
        <a href="@Url.Action("Details", "Sales", new { id = sale?.Id })" class="btn btn-outline-secondary">
            <i class="fas fa-arrow-left me-1"></i> Back to Sale
        </a>
    </div>
</div>

@if (sale != null)
{
    <!-- Original Sale Information -->
    <div class="card border-0 shadow-sm mb-4">
        <div class="card-header" style="background: linear-gradient(135deg, #138808 0%, #28a745 100%);">
            <h5 class="mb-0 text-white">
                <i class="fas fa-receipt me-2"></i>
                Original Sale Information | मूल बिक्री जानकारी
            </h5>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-lg-4 col-md-6">
                    <div class="info-box p-3 rounded" style="background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%);">
                        <div class="d-flex align-items-center">
                            <i class="fas fa-hashtag fa-2x text-primary me-3"></i>
                            <div>
                                <small class="text-muted">Invoice Number</small>
                                <div class="fw-bold text-primary fs-5">@sale.InvoiceNumber</div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-lg-4 col-md-6">
                    <div class="info-box p-3 rounded" style="background: linear-gradient(135deg, #f3e5f5 0%, #e1bee7 100%);">
                        <div class="d-flex align-items-center">
                            <i class="fas fa-calendar fa-2x text-purple me-3"></i>
                            <div>
                                <small class="text-muted">Sale Date</small>
                                <div class="fw-bold fs-6">@sale.SaleDate.ToString("dd MMM yyyy")</div>
                                <small class="text-muted">@sale.SaleDate.ToString("hh:mm tt")</small>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-lg-4 col-md-6">
                    <div class="info-box p-3 rounded" style="background: linear-gradient(135deg, #e8f5e8 0%, #c8e6c9 100%);">
                        <div class="d-flex align-items-center">
                            <i class="fas fa-rupee-sign fa-2x text-success me-3"></i>
                            <div>
                                <small class="text-muted">Total Amount</small>
                                <div class="fw-bold text-success fs-5">₹@sale.TotalAmount.ToString("N2")</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="row mt-3">
                <div class="col-lg-4 col-md-6">
                    <div class="info-box p-3 rounded" style="background: linear-gradient(135deg, #fff3e0 0%, #ffe0b2 100%);">
                        <div class="d-flex align-items-center">
                            <i class="fas fa-user fa-2x text-warning me-3"></i>
                            <div>
                                <small class="text-muted">Customer</small>
                                <div class="fw-bold">@(!string.IsNullOrEmpty(sale.CustomerName) ? sale.CustomerName : "Walk-in Customer")</div>
                                @if (!string.IsNullOrEmpty(sale.CustomerPhone))
                                {
                                    <small class="text-muted">📞 @sale.CustomerPhone</small>
                                }
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-lg-4 col-md-6">
                    <div class="info-box p-3 rounded" style="background: linear-gradient(135deg, #fce4ec 0%, #f8bbd9 100%);">
                        <div class="d-flex align-items-center">
                            <i class="fas fa-credit-card fa-2x text-pink me-3"></i>
                            <div>
                                <small class="text-muted">Payment Method</small>
                                <div class="fw-bold">@sale.PaymentMethod</div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-lg-4 col-md-6">
                    <div class="info-box p-3 rounded" style="background: linear-gradient(135deg, #f1f8e9 0%, #dcedc8 100%);">
                        <div class="d-flex align-items-center">
                            <i class="fas fa-boxes fa-2x text-success me-3"></i>
                            <div>
                                <small class="text-muted">Total Items</small>
                                <div class="fw-bold text-success fs-5">@sale.TotalItems</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @if (!(ViewBag.HasReturnableItems ?? true))
    {
        <!-- All Items Returned - Show Return History -->
        <div class="alert alert-info border-0 shadow-sm mb-4">
            <div class="row align-items-center">
                <div class="col-md-8">
                    <div class="d-flex align-items-center">
                        <i class="fas fa-check-circle fa-3x me-3 text-success"></i>
                        <div>
                            <h5 class="alert-heading mb-1 text-success">All Items Fully Returned</h5>
                            <p class="mb-0">
                                <strong>@ViewBag.TotalItemsInSale</strong> item types from this sale have been completely returned. 
                                No further returns are possible.
                            </p>
                            <small class="text-muted">सभी आइटम पूरी तरह वापस कर दिए गए हैं।</small>
                        </div>
                    </div>
                </div>
                <div class="col-md-4 text-end">
                    <a href="@Url.Action("Index", "Returns", new { saleId = ViewBag.Sale.Id })" 
                       class="btn btn-success">
                        <i class="fas fa-history me-1"></i> View All Returns
                    </a>
                </div>
            </div>
        </div>
    }

    @if (existingReturns?.Any() == true)
    {
        <!-- Existing Returns Alert -->
        <div class="alert alert-info border-0 shadow-sm mb-4">
            <div class="d-flex align-items-center">
                <i class="fas fa-info-circle fa-2x me-3"></i>
                <div>
                    <h6 class="alert-heading mb-1">Previous Returns Found</h6>
                    <p class="mb-0">This sale has @existingReturns.Count completed return(s). All returns are processed immediately upon creation.</p>
                </div>
                <a href="@Url.Action("Index", new { saleId = sale.Id })" class="btn btn-outline-info btn-sm ms-auto">
                    View Returns
                </a>
            </div>
        </div>
    }

    <div class="return-form-section">
        <form asp-action="Create" id="returnForm" novalidate>
            <div asp-validation-summary="All" class="alert alert-danger" style="display: none;"></div>
            <input type="hidden" asp-for="SaleId" value="@sale.Id" />
            
            <div class="row">
                <div class="col-lg-8">
                    <!-- Return Items Selection -->
                    <div class="card border-0 shadow-sm mb-4">
                        <div class="card-header" style="background: linear-gradient(135deg, #FF6B35 0%, #F7931E 100%);">
                            <h5 class="mb-0 text-white">
                                <i class="fas fa-boxes me-2"></i>
                                Select Items to Return | वापसी के लिए आइटम चुनें
                            </h5>
                        </div>
                        <div class="card-body p-0">
                            <div class="table-responsive">
                                <table class="table table-hover mb-0">
                                    <thead class="table-light">
                                        <tr>
                                            <th style="width: 5%">
                                                <div class="form-check">
                                                    <input type="checkbox" id="selectAll" class="form-check-input">
                                                    <label class="form-check-label" for="selectAll">
                                                        <small>All</small>
                                                    </label>
                                                </div>
                                            </th>
                                            <th style="width: 40%">
                                                <i class="fas fa-tag text-primary me-1"></i>Product
                                            </th>
                                            <th class="text-center" style="width: 12%">
                                                <i class="fas fa-shopping-cart text-success me-1"></i>Sold Qty
                                            </th>
                                            <th class="text-center" style="width: 15%">
                                                <i class="fas fa-undo text-warning me-1"></i>Return Qty
                                            </th>
                                            <th class="text-end" style="width: 13%">
                                                <i class="fas fa-rupee-sign text-info me-1"></i>Unit Price
                                            </th>
                                            <th class="text-end" style="width: 15%">
                                                <i class="fas fa-calculator text-danger me-1"></i>Return Total
                                            </th>
                                        </tr>
                                    </thead>
                                    <tbody id="returnItemsTable">
                                        @if (sale.SaleItems?.Any() == true)
                                        {
                                            var remainingQuantities = ViewBag.RemainingQuantities as Dictionary<int, int> ?? new Dictionary<int, int>();
                                            for (int i = 0; i < sale.SaleItems.Count; i++)
                                            {
                                                var item = sale.SaleItems[i];
                                                var remainingQty = remainingQuantities.GetValueOrDefault(item.Id, item.Quantity);
                                                var isReturnable = remainingQty > 0;
                                                
                                                <tr class="return-item-row @(!isReturnable ? "table-secondary" : "")" 
                                                    data-item-index="@i" 
                                                    data-product-id="@item.ProductId" 
                                                    data-sale-item-id="@item.Id"
                                                    data-remaining-qty="@remainingQty">
                                                    <td>
                                                        <div class="form-check">
                                                            <input type="checkbox" 
                                                                   class="form-check-input item-checkbox" 
                                                                   id="item_@i" 
                                                                   onchange="toggleReturnItem(this, @i)"
                                                                   @(!isReturnable ? "disabled" : "")>
                                                        </div>
                                                    </td>
                                                    <td>
                                                        <div>
                                                            <strong class="text-dark">@item.ProductName</strong>
                                                            <br>
                                                            <small class="text-muted">
                                                                <i class="fas fa-barcode me-1"></i>Product ID: @item.ProductId
                                                                | GST: @item.GSTRate% 
                                                                @if (item.DiscountAmount > 0)
                                                                {
                                                                    <span class="text-success">| Discount: ₹@item.DiscountAmount.ToString("N2")</span>
                                                                }
                                                            </small>
                                                            @if (!isReturnable)
                                                            {
                                                                <br>
                                                                <small class="text-danger fw-bold">
                                                                    <i class="fas fa-info-circle me-1"></i>Fully Returned - No remaining quantity
                                                                </small>
                                                            }
                                                        </div>
                                                    </td>
                                                    <td class="text-center">
                                                        <div>
                                                            <span class="badge bg-primary fs-6">@item.Quantity</span>
                                                            <br>
                                                            <small class="text-muted">Sold</small>
                                                        </div>
                                                    </td>
                                                    <td class="text-center">
                                                        @if (isReturnable)
                                                        {
                                                            <div>
                                                                <input type="number" 
                                                                       class="form-control return-quantity-input text-center" 
                                                                       name="ReturnItems[@i].ReturnQuantity"
                                                                       min="1" 
                                                                       max="@remainingQty" 
                                                                       value="@Math.Min(remainingQty, item.Quantity)"
                                                                       disabled
                                                                       onchange="calculateReturnTotal(@i)"
                                                                       style="max-width: 80px; margin: 0 auto;">
                                                                <small class="text-success fw-semibold">
                                                                    <i class="fas fa-check me-1"></i>Available: @remainingQty
                                                                </small>
                                                                <input type="hidden" name="ReturnItems[@i].SaleItemId" value="@item.Id">
                                                                <input type="hidden" name="ReturnItems[@i].ProductId" value="@item.ProductId">
                                                                <input type="hidden" name="ReturnItems[@i].DiscountAmount" value="@((item.DiscountAmount / item.Quantity) * 1)">
                                                            </div>
                                                        }
                                                        else
                                                        {
                                                            <div class="text-center">
                                                                <span class="badge bg-danger">0</span>
                                                                <br>
                                                                <small class="text-danger">
                                                                    <i class="fas fa-times me-1"></i>No Stock
                                                                </small>
                                                            </div>
                                                        }
                                                    </td>
                                                    <td class="text-end">
                                                        <strong>₹@item.UnitPrice.ToString("N2")</strong>
                                                    </td>
                                                    <td class="text-end">
                                                        <strong class="return-line-total text-danger fs-6">₹0.00</strong>
                                                    </td>
                                                </tr>
                                            }
                                        }
                                    </tbody>
                                </table>
                            </div>
                            <div class="card-footer bg-light">
                                <small class="text-muted">
                                    <i class="fas fa-info-circle me-1"></i>
                                    <strong>Note:</strong> Check the items you want to return and adjust quantities as needed. 
                                    Return will be processed immediately with inventory update.
                                </small>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-lg-4">
                    <!-- Return Information -->
                    <div class="card border-0 shadow-sm mb-4">
                        <div class="card-header" style="background: linear-gradient(135deg, #6f42c1 0%, #8e44ad 100%);">
                            <h6 class="mb-0 text-white">
                                <i class="fas fa-info-circle me-2"></i>
                                Return Information
                            </h6>
                        </div>
                        <div class="card-body">
                            <div class="mb-3">
                                <label asp-for="ReturnReason" class="form-label fw-semibold">
                                    <i class="fas fa-comment-alt text-primary me-1"></i>
                                    Return Reason <span class="text-danger">*</span>
                                </label>
                                <select asp-for="ReturnReason" class="form-select" required 
                                        style="border-left: 4px solid #6f42c1;">
                                    <option value="">Select Reason</option>
                                    <option value="Defective Product">🔧 Defective Product</option>
                                    <option value="Wrong Item Received">❌ Wrong Item Received</option>
                                    <option value="Size/Fit Issue">📏 Size/Fit Issue</option>
                                    <option value="Quality Issue">⭐ Quality Issue</option>
                                    <option value="Customer Changed Mind">🤔 Customer Changed Mind</option>
                                    <option value="Damaged in Transit">📦 Damaged in Transit</option>
                                    <option value="Late Delivery">⏰ Late Delivery</option>
                                    <option value="Color Mismatch">🎨 Color Mismatch</option>
                                    <option value="Other">❓ Other</option>
                                </select>
                                <span asp-validation-for="ReturnReason" class="text-danger small"></span>
                            </div>

                            <div class="mb-3">
                                <label asp-for="RefundMethod" class="form-label fw-semibold">
                                    <i class="fas fa-credit-card text-success me-1"></i>
                                    Refund Method
                                </label>
                                <select asp-for="RefundMethod" class="form-select" 
                                        style="border-left: 4px solid #28a745;">
                                    <option value="Original">🔄 Same as Original Payment</option>
                                    <option value="Cash">💵 Cash</option>
                                    <option value="Card">💳 Card Refund</option>
                                    <option value="UPI">📱 UPI Transfer</option>
                                    <option value="BankTransfer">🏦 Bank Transfer</option>
                                    <option value="StoreCredit">🎁 Store Credit</option>
                                </select>
                            </div>

                            <div class="mb-3">
                                <label asp-for="RefundReference" class="form-label fw-semibold">
                                    <i class="fas fa-hashtag text-info me-1"></i>
                                    Refund Reference
                                </label>
                                <input asp-for="RefundReference" class="form-control" 
                                       placeholder="e.g., UPI-ICICI-UTR123456, Card RRN789012, Cash-Staff:Ravi"
                                       style="border-left: 4px solid #17a2b8;">
                                <small class="form-text text-muted">
                                    Enter transaction ID, reference number, or proof of refund processing
                                </small>
                                <span asp-validation-for="RefundReference" class="text-danger small"></span>
                            </div>

                            <div class="mb-3">
                                <label asp-for="Notes" class="form-label fw-semibold">
                                    <i class="fas fa-sticky-note text-warning me-1"></i>
                                    Additional Notes
                                </label>
                                <textarea asp-for="Notes" class="form-control" rows="4" 
                                          placeholder="Any additional information about this return... e.g., item condition, photos reference, special circumstances"
                                          style="border-left: 4px solid #ffc107;"></textarea>
                                <small class="form-text text-muted">
                                    Optional: Item condition, restock notes, processing details, etc.
                                </small>
                            </div>
                        </div>
                    </div>

                    <!-- Return Summary -->
                    <div class="card border-0 shadow-sm">
                        <div class="card-header" style="background: linear-gradient(135deg, #28a745 0%, #20c997 100%);">
                            <h6 class="mb-0 text-white">
                                <i class="fas fa-calculator me-2"></i>
                                Refund Summary
                            </h6>
                        </div>
                        <div class="card-body">
                            <div class="summary-item d-flex justify-content-between mb-2">
                                <span><i class="fas fa-boxes text-primary me-1"></i>Items to Return:</span>
                                <strong id="returnItemCount" class="text-primary">0</strong>
                            </div>
                            
                            <div class="summary-item d-flex justify-content-between mb-2">
                                <span><i class="fas fa-calculator text-info me-1"></i>Subtotal:</span>
                                <strong id="returnSubtotal">₹0.00</strong>
                            </div>
                            
                            <div class="summary-item d-flex justify-content-between mb-2">
                                <span><i class="fas fa-percent text-warning me-1"></i>GST Amount:</span>
                                <strong id="returnGST">₹0.00</strong>
                            </div>
                            
                            <div class="summary-item d-flex justify-content-between mb-3">
                                <span><i class="fas fa-tag text-success me-1"></i>Discount:</span>
                                <strong id="returnDiscount" class="text-success">₹0.00</strong>
                            </div>
                            
                            <hr class="my-3">
                            
                            <div class="summary-item d-flex justify-content-between mb-3">
                                <strong class="fs-6"><i class="fas fa-rupee-sign text-success me-1"></i>Refund Total:</strong>
                                <strong id="refundTotal" class="text-success fs-5">₹0.00</strong>
                            </div>
                            
                            <div class="alert alert-warning py-2" id="returnWarning" style="display: none;">
                                <small>
                                    <i class="fas fa-exclamation-triangle me-1"></i>
                                    Please select at least one item to return.
                                </small>
                            </div>
                            
                            <div class="alert alert-success py-2" id="returnSuccess" style="display: none;">
                                <small>
                                    <i class="fas fa-check-circle me-1"></i>
                                    Return will be processed immediately upon submission.
                                </small>
                            </div>
                            
                            <div class="d-grid gap-2">
                                <button type="submit" class="btn btn-success btn-lg" id="processReturnBtn" disabled>
                                    <i class="fas fa-check-double me-1"></i> Process Return & Refund
                                </button>
                                <small class="text-center text-muted">
                                    Return will be processed immediately with inventory update
                                </small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </form>
    </div>
}

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    
    <script>

        const saleDiscountPercentage = calculateSaleDiscountPercentage();

        const saleItems = @Html.Raw(Json.Serialize(
            sale?.SaleItems?.Select(si => new {
                id = si.Id,
                productId = si.ProductId,
                productName = si.ProductName,
                quantity = si.Quantity,
                unitPrice = si.UnitPrice,
                discountAmount = 0,
                gstRate = si.GSTRate,
                gstAmount = si.GSTAmount,
                lineTotal = si.LineTotal
            }) ?? Enumerable.Empty<object>()
        ));

        function calculateSaleDiscountPercentage() {
            if (!@Json.Serialize(sale)) return 0;
        
            const saleData = @Json.Serialize(sale);
            const subtotal = saleData.subTotal || 0;
            const gstAmount = saleData.gstAmount || 0;
            const totalAmount = saleData.totalAmount || 0;
            const discountAmount = saleData.discountAmount || 0;
        
            const totalBeforeDiscount = subtotal + gstAmount;
        
            if (totalBeforeDiscount > 0 && discountAmount > 0) {
                return (discountAmount / totalBeforeDiscount) * 100;
            }
        
            return 0;
        }

        console.log('Sale discount percentage:', saleDiscountPercentage + '%');
        
        const remainingQuantities = @Html.Raw(Json.Serialize(ViewBag.RemainingQuantities ?? new Dictionary<string, object>()));
        
        $(document).ready(function() {
            // Check if this is a fully returned sale
            const hasReturnableItems = @Json.Serialize(ViewBag.HasReturnableItems ?? true);
            
            if (!hasReturnableItems) {
                // Sale is fully returned - initialize read-only view
                $('#returnWarning').html('<i class="fas fa-check-circle text-success me-1"></i> All items from this sale have been fully returned.').show();
                $('#processReturnBtn').prop('disabled', true).html('<i class="fas fa-check-double me-1"></i> Sale Fully Returned');
                
                // Show success message in the summary
                $('#returnItemCount').text('All Returned');
                $('#returnSubtotal, #returnGST, #returnDiscount, #refundTotal').text('₹0.00');
                
                // Disable all interactive elements
                $('.item-checkbox, .return-quantity-input, #selectAll').prop('disabled', true);
                $('#ReturnReason, #RefundMethod, #RefundReference, #Notes').prop('disabled', true);
                
                // Show informational styling
                $('.return-form-section .card').addClass('border-success');
                $('.return-form-section .card-header').removeClass().addClass('card-header bg-success text-white');
                
                return; // Skip the rest of initialization
            }

            // Continue with normal initialization for returnable sales
            updateReturnSummary();
            
            // Set default refund method to original payment
            @if (!string.IsNullOrEmpty(sale?.PaymentMethod))
            {
                <text>
                $('#RefundMethod').val('@sale.PaymentMethod');
                </text>
            }
            
            // Check if no items are returnable (different from fully returned sale)
            const returnableItems = $('.item-checkbox:not(:disabled)').length;
            if (returnableItems === 0 && hasReturnableItems) {
                $('#processReturnBtn').prop('disabled', true).html('<i class="fas fa-ban me-1"></i> No Items Available for Return');
                $('#returnWarning').html('<i class="fas fa-info-circle me-1"></i> All items from this sale have been fully returned.').show();
            }
        });

        // Select All functionality (only enabled items)
        $('#selectAll').on('change', function() {
            const isChecked = $(this).is(':checked');
            $('.item-checkbox:not(:disabled)').prop('checked', isChecked).each(function() {
                const index = $(this).closest('tr').data('item-index');
                toggleReturnItem(this, index);
            });
        });

        function toggleReturnItem(checkbox, itemIndex) {
            const isChecked = $(checkbox).is(':checked');
            const row = $(checkbox).closest('tr');
            const quantityInput = row.find('.return-quantity-input');
            const remainingQty = parseInt(row.data('remaining-qty')) || 0;
            
            if (isChecked && remainingQty > 0) {
                quantityInput.prop('disabled', false);
                quantityInput.attr('max', remainingQty);
                row.addClass('table-warning');
            } else {
                quantityInput.prop('disabled', true).val(Math.min(remainingQty, saleItems[itemIndex]?.quantity || 1));
                row.removeClass('table-warning');
            }
            
            calculateReturnTotal(itemIndex);
            updateReturnSummary();
        }

        function calculateReturnTotal(itemIndex) {
            const row = $(`.return-item-row[data-item-index=\"${itemIndex}\"]`);
            const checkbox = row.find('.item-checkbox');
            const quantityInput = row.find('.return-quantity-input');
            const totalCell = row.find('.return-line-total');
            const remainingQty = parseInt(row.data('remaining-qty')) || 0;
    
            if (checkbox.is(':checked') && remainingQty > 0) {
                let quantity = parseInt(quantityInput.val()) || 0;
        
                // Ensure quantity doesn't exceed remaining
                if (quantity > remainingQty) {
                    quantity = remainingQty;
                    quantityInput.val(quantity);
            
                    // Show warning
                    Swal.fire({
                        icon: 'warning',
                        title: 'Quantity Adjusted',
                        text: `Maximum returnable quantity is ${remainingQty}. Quantity has been adjusted.`,
                        timer: 3000,
                        showConfirmButton: false
                    });
                }
        
                const saleItem = saleItems[itemIndex];
                const unitPrice = saleItem.unitPrice;
                const gstRate = saleItem.gstRate;
        
                // Calculate line totals WITHOUT individual discount
                const lineSubtotalBeforeDiscount = quantity * unitPrice;
                const lineGST = lineSubtotalBeforeDiscount * (gstRate / 100);
                const totalBeforeDiscount = lineSubtotalBeforeDiscount + lineGST;
        
                // NEW: Apply bill-level discount percentage to this line item
                const billDiscountPercentage = saleDiscountPercentage || 0; // This comes from the sale
                const lineDiscountAmount = totalBeforeDiscount * (billDiscountPercentage / 100);
                const lineTotal = totalBeforeDiscount - lineDiscountAmount;
        
                totalCell.text('₹' + lineTotal.toFixed(2));
        
                // Update hidden discount amount field to store the calculated bill-level discount portion
                const discountInput = row.find('input[name$=\".DiscountAmount\"]');
                discountInput.val(lineDiscountAmount.toFixed(2));
            } else {
                totalCell.text('₹0.00');
            }
    
            updateReturnSummary();
        }

        function updateReturnSummary() {
            let totalItems = 0;
            let subtotal = 0;
            let totalGST = 0;
            let totalDiscountAmount = 0;
    
            $('.return-item-row').each(function() {
                const checkbox = $(this).find('.item-checkbox');
                const remainingQty = parseInt($(this).data('remaining-qty')) || 0;
        
                if (checkbox.is(':checked') && remainingQty > 0) {
                    const itemIndex = $(this).data('item-index');
                    const quantity = parseInt($(this).find('.return-quantity-input').val()) || 0;
                    const saleItem = saleItems[itemIndex];
            
                    if (saleItem && quantity > 0) {
                        totalItems += quantity;
                
                        const unitPrice = saleItem.unitPrice;
                        const gstRate = saleItem.gstRate;
                
                        // Calculate without individual discount - using bill-level discount
                        const lineSubtotal = quantity * unitPrice;
                        const lineGST = lineSubtotal * (gstRate / 100);
                        const totalBeforeDiscount = lineSubtotal + lineGST;
                
                        // Apply bill-level discount
                        const billDiscountPercentage = saleDiscountPercentage || 0;
                        const lineDiscountAmount = totalBeforeDiscount * (billDiscountPercentage / 100);
                
                        subtotal += lineSubtotal;
                        totalGST += lineGST;
                        totalDiscountAmount += lineDiscountAmount;
                    }
                }
            });
    
            const refundAmount = (subtotal + totalGST) - totalDiscountAmount;
    
            // Update display
            $('#returnItemCount').text(totalItems);
            $('#returnSubtotal').text('₹' + subtotal.toFixed(2));
            $('#returnGST').text('₹' + totalGST.toFixed(2));
            $('#returnDiscount').text('₹' + totalDiscountAmount.toFixed(2));
            $('#refundTotal').text('₹' + refundAmount.toFixed(2));
    
            // Enable/disable submit button logic remains the same
            const hasItems = totalItems > 0;
            const returnableItemsExist = $('.item-checkbox:not(:disabled)').length > 0;
    
            if (!returnableItemsExist) {
                $('#processReturnBtn').prop('disabled', true).html('<i class="fas fa-ban me-1"></i> No Items Available for Return');
                $('#returnWarning').html('<i class="fas fa-info-circle me-1"></i> All items from this sale have been fully returned.').show();
                $('#returnSuccess').hide();
            } else {
                $('#processReturnBtn').prop('disabled', !hasItems);
                $('#returnWarning').toggle(!hasItems);
                $('#returnSuccess').toggle(hasItems);
            }
    
            // Update select all checkbox logic remains the same
            const enabledCheckboxes = $('.item-checkbox:not(:disabled)');
            const checkedEnabledCheckboxes = $('.item-checkbox:not(:disabled):checked');
    
            if (enabledCheckboxes.length > 0) {
                $('#selectAll').prop('indeterminate', checkedEnabledCheckboxes.length > 0 && checkedEnabledCheckboxes.length < enabledCheckboxes.length);
                $('#selectAll').prop('checked', checkedEnabledCheckboxes.length === enabledCheckboxes.length);
                $('#selectAll').prop('disabled', false);
            } else {
                $('#selectAll').prop('disabled', true).prop('checked', false);
            }
        }

        // Form validation and submission
        $('#returnForm').on('submit', function(e) {
            e.preventDefault();
    
            console.log('Form submission started...');
    
            // Check for selected items - FIXED SELECTOR
            const selectedCheckboxes = $('.item-checkbox:checked:not(:disabled)');
            const hasSelectedItems = selectedCheckboxes.length > 0;
            const returnReason = $('#ReturnReason').val();
    
            console.log('Selected checkboxes count:', hasSelectedItems ? selectedCheckboxes.length : 0);
            console.log('Return reason:', returnReason);
    
            if (!hasSelectedItems) {
                console.log('ERROR: No items selected');
                Swal.fire('Error', 'Please select at least one item to return.', 'error');
                return false;
            }
    
            if (!returnReason) {
                console.log('ERROR: No return reason selected');
                Swal.fire('Error', 'Please select a return reason.', 'error');
                $('#ReturnReason').focus();
                return false;
            }
    
            // Validate quantities don't exceed remaining
            let hasQuantityErrors = false;
            selectedCheckboxes.each(function() {
                const row = $(this).closest('tr');
                const remainingQty = parseInt(row.data('remaining-qty')) || 0;
                const requestedQty = parseInt(row.find('.return-quantity-input').val()) || 0;
        
                console.log('Item validation - Remaining:', remainingQty, 'Requested:', requestedQty);
        
                if (requestedQty > remainingQty || requestedQty <= 0) {
                    hasQuantityErrors = true;
                    return false;
                }
            });
    
            if (hasQuantityErrors) {
                console.log('ERROR: Quantity validation failed');
                Swal.fire('Error', 'One or more items have invalid quantities. Please adjust and try again.', 'error');
                return false;
            }
    
            // CRITICAL FIX: Remove all unchecked items from form AND re-index properly
            console.log('Cleaning up form data...');
    
            // Remove all existing ReturnItems inputs first
            $('.dynamic-return-input').remove();
    
            // Add fresh ReturnItems inputs for selected items only
            let itemIndex = 0;
            selectedCheckboxes.each(function() {
                const row = $(this).closest('tr');
                const saleItemId = row.data('sale-item-id');
                const productId = row.data('product-id');
                const returnQuantity = parseInt(row.find('.return-quantity-input').val()) || 1;

                console.log("INPUT DEBUG →", row.find('.return-quantity-input')[0]);
                console.log("VALUE →", row.find('.return-quantity-input').val());
                console.log("DISABLED? →", row.find('.return-quantity-input').prop("disabled"));
                console.log("READONLY? →", row.find('.return-quantity-input').prop("readonly"));

                console.log("Tarun: " + returnQuantity);
                
                // Calculate discount amount proportionally
                const itemIndexInSale = row.data('item-index');
                const saleItem = saleItems[itemIndexInSale];
                const discountPerUnit = (saleItem.unitPrice * saleDiscountPercentage) /100;
                const totalDiscountForReturn = (discountPerUnit * returnQuantity).toFixed(2);
        
                console.log(`Adding item ${itemIndex}: SaleItemId=${saleItemId}, ProductId=${productId}, Qty=${returnQuantity}, Discount=${totalDiscountForReturn}`);
        
                // Create hidden inputs for this return item
                $('<input>').attr({
                    type: 'hidden',
                    name: `ReturnItems[${itemIndex}].SaleItemId`,
                    value: saleItemId,
                    class: 'dynamic-return-input'
                }).appendTo('#returnForm');
        
                $('<input>').attr({
                    type: 'hidden',
                    name: `ReturnItems[${itemIndex}].ProductId`,
                    value: productId,
                    class: 'dynamic-return-input'
                }).appendTo('#returnForm');
        
                $('<input>').attr({
                    type: 'hidden',
                    name: `ReturnItems[${itemIndex}].ReturnQuantity`,
                    value: returnQuantity,
                    class: 'dynamic-return-input'
                }).appendTo('#returnForm');
        
                $('<input>').attr({
                    type: 'hidden',
                    name: `ReturnItems[${itemIndex}].DiscountAmount`,
                    value: totalDiscountForReturn,
                    class: 'dynamic-return-input'
                }).appendTo('#returnForm');
        
                itemIndex++;
            });
    
            console.log(`Total return items prepared: ${itemIndex}`);
    
            // Debug: Log all form data that will be submitted
            const formData = new FormData(this);
            console.log('=== FORM DATA TO SUBMIT ===');
            for (let pair of formData.entries()) {
                console.log(pair[0] + ' = ' + pair[1]);
            }
            console.log('=== END FORM DATA ===');
    
            // Show confirmation dialog
            const refundAmount = $('#refundTotal').text();
            const itemCount = $('#returnItemCount').text();
    
            Swal.fire({
                title: 'Process Return & Refund?',
                html: `
                    <div class="text-start">
                        <p><strong>Items to Return:</strong> ${itemCount}</p>
                        <p><strong>Refund Amount:</strong> ${refundAmount}</p>
                        <p><strong>Return Reason:</strong> ${$('#ReturnReason option:selected').text()}</p>
                        <hr>
                        <div class="alert alert-warning">
                            <small><i class="fas fa-exclamation-triangle me-1"></i> <strong>This action will:</strong></small>
                            <ul class="small mb-0 mt-1">
                                <li>Process the return immediately</li>
                                <li>Update inventory (add items back to stock)</li>
                                <li>Complete the refund process</li>
                                <li>Cannot be easily undone</li>
                            </ul>
                        </div>
                    </div>
                `,
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#28a745',
                cancelButtonColor: '#6c757d',
                confirmButtonText: 'Yes, Process Return & Refund',
                cancelButtonText: 'Cancel'
            }).then((result) => {
                if (result.isConfirmed) {
                    // Show processing state
                    $('#processReturnBtn').prop('disabled', true).html('<i class="fas fa-spinner fa-spin me-1"></i> Processing Return...');
            
                    // Submit form
                    console.log('Submitting form...');
                    this.submit();
                } else {
                    console.log('Form submission cancelled by user');
                }
            });
        });

        // Real-time validation feedback
        $('#ReturnReason').on('change', function() {
            if ($(this).val()) {
                $(this).removeClass('is-invalid').addClass('is-valid');
            } else {
                $(this).removeClass('is-valid').addClass('is-invalid');
            }
        });

        // Enhanced quantity validation
        $('.return-quantity-input').on('input', function() {
            const input = $(this);
            const min = parseInt(input.attr('min'));
            const max = parseInt(input.attr('max'));
            const val = parseInt(input.val());
            const itemIndex = input.closest('tr').data('item-index');
            
            if (val < min || val > max || isNaN(val)) {
                input.addClass('is-invalid');
            } else {
                input.removeClass('is-invalid').addClass('is-valid');
            }
            
            calculateReturnTotal(itemIndex);
        });
        
        // Initialize on page load
        updateReturnSummary();
    </script>
    
    <!-- Include SweetAlert2 -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <style>
        .info-box:hover {
            transform: translateY(-2px);
            transition: transform 0.2s ease;
        }
        
        .return-item-row.table-warning {
            border-left: 4px solid #ffc107;
        }
        
        .summary-item {
            padding: 0.25rem 0;
        }
        
        .form-control.is-valid {
            border-left-color: #28a745;
        }
        
        .form-control.is-invalid {
            border-left-color: #dc3545;
        }
        
        .text-pink {
            color: #e91e63 !important;
        }
        
        .text-purple {
            color: #6f42c1 !important;
        }

        .return-form-section { display: block; }
    </style>
}