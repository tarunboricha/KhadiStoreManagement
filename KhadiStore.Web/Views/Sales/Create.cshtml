@model KhadiStore.Application.DTOs.CreateSaleDto
@{
    ViewData["Title"] = "Create New Sale";
}

<div class="container-fluid">
    <!-- Header Section -->
    <div class="row mb-3">
        <div class="col">
            <h2 class="page-title text-primary mb-1">
                <i class="fas fa-cash-register me-2 text-success"></i>
                Create New Sale
                <small class="text-muted fs-6 ms-2">| नई बिक्री बनाएं</small>
            </h2>
            <p class="text-muted mb-0">Select products, set quantities and process the sale</p>
        </div>
        <div class="col-auto">
            <a href="@Url.Action("Index")" class="btn btn-outline-secondary">
                <i class="fas fa-arrow-left me-1"></i> Back to Sales
            </a>
        </div>
    </div>

    <form asp-action="Create" id="saleForm" novalidate>
        <div class="row">
            <!-- Left Column - Sale Info & Product Selection -->
            <div class="col-lg-5">
                <!-- Sale Information Card -->
                <div class="card border-0 shadow-sm mb-3">
                    <div class="card-header bg-primary text-white py-2">
                        <h6 class="mb-0">
                            <i class="fas fa-info-circle me-2"></i>Sale Information
                        </h6>
                    </div>
                    <div class="card-body p-3">
                        <div class="row g-2">
                            <div class="col-md-6">
                                <label asp-for="SaleDate" class="form-label fw-semibold small">Sale Date</label>
                                <input asp-for="SaleDate" type="datetime-local" class="form-control form-control-sm" required />
                                <span asp-validation-for="SaleDate" class="text-danger small"></span>
                            </div>
                            <div class="col-md-6">
                                <label asp-for="PaymentMethod" class="form-label fw-semibold small">Payment Method</label>
                                <select asp-for="PaymentMethod" class="form-select form-select-sm" required>
                                    <option value="Cash">💵 Cash</option>
                                    <option value="Card">💳 Card</option>
                                    <option value="UPI">📱 UPI</option>
                                    <option value="BankTransfer">🏦 Bank Transfer</option>
                                </select>
                            </div>
                            <!-- UPDATED: Direct customer input fields -->
                            <div class="col-md-6">
                                <label asp-for="CustomerName" class="form-label fw-semibold small">
                                    Customer Name <small class="text-muted">(Optional)</small>
                                </label>
                                <input asp-for="CustomerName" class="form-control form-control-sm"
                                       placeholder="Enter customer name" maxlength="100" />
                                <span asp-validation-for="CustomerName" class="text-danger small"></span>
                            </div>
                            <div class="col-md-6">
                                <label asp-for="CustomerPhone" class="form-label fw-semibold small">
                                    Mobile Number <small class="text-muted">(Optional)</small>
                                </label>
                                <input asp-for="CustomerPhone" class="form-control form-control-sm"
                                       placeholder="Enter mobile number" maxlength="20" type="tel" />
                                <span asp-validation-for="CustomerPhone" class="text-danger small"></span>
                                <small class="form-text text-muted">Customer will be auto-created if provided</small>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Product Selection Card -->
                <div class="card border-0 shadow-sm mb-3">
                    <div class="card-header bg-success text-white py-2">
                        <h6 class="mb-0">
                            <i class="fas fa-plus-circle me-2"></i>Add Products to Sale
                        </h6>
                    </div>
                    <div class="card-body p-3">
                        <div class="row g-2">
                            <div class="col-12">
                                <label class="form-label fw-semibold small">Select Category First</label>
                                <select id="categorySelect" class="form-select form-select-sm" onchange="loadProductsByCategory()">
                                    <option value="">-- Select Category --</option>
                                    @if (ViewBag.Categories != null)
                                    {
                                        @foreach (var category in (List<SelectListItem>)ViewBag.Categories)
                                        {
                                            <option value="@category.Value">@category.Text</option>
                                        }
                                    }
                                </select>
                            </div>
                            <div class="col-12">
                                <label class="form-label fw-semibold small">Select Product</label>
                                <select id="productSelect" class="form-select form-select-sm" onchange="loadProductDetails()" disabled>
                                    <option value="">-- First Select Category --</option>
                                </select>
                            </div>
                        </div>

                        <!-- Product Details Display -->
                        <div id="productDetails" class="mt-3" style="display: none;">
                            <div class="border rounded p-2 bg-light">
                                <div class="row g-2">
                                    <div class="col-6">
                                        <small class="text-muted">Price:</small>
                                        <div class="fw-bold text-success" id="productPrice">₹0.00</div>
                                    </div>
                                    <div class="col-6">
                                        <small class="text-muted">Available Stock:</small>
                                        <div class="fw-bold text-info" id="productStock">0</div>
                                    </div>
                                    @* <div class="col-6">
                                        <small class="text-muted">GST Rate:</small>
                                        <div class="fw-bold" id="productGST">0%</div>
                                    </div> *@
                                    <div class="col-6">
                                        <label class="form-label fw-semibold small">Quantity</label>
                                        <div class="input-group input-group-sm">
                                            <button type="button" class="btn btn-outline-secondary" onclick="adjustQuantity(-1)">
                                                <i class="fas fa-minus"></i>
                                            </button>
                                            <input type="number" id="saleQuantity" class="form-control text-center" value="1" min="1" max="1">
                                            <button type="button" class="btn btn-outline-secondary" onclick="adjustQuantity(1)">
                                                <i class="fas fa-plus"></i>
                                            </button>
                                        </div>
                                    </div>
                                    <!-- REMOVED: Individual product discount field -->
                                </div>
                            </div>
                        </div>

                        <!-- Add to Cart Button -->
                        <div class="d-grid mt-3">
                            <button type="button" id="addToCartBtn" class="btn btn-success" onclick="addProductToSale()" disabled>
                                <i class="fas fa-cart-plus me-2"></i>Add to Sale
                            </button>
                        </div>
                    </div>
                </div>

                <!-- NEW: Bill Discount Card -->
                <div class="card border-0 shadow-sm">
                    <div class="card-header bg-warning text-dark py-2">
                        <h6 class="mb-0">
                            <i class="fas fa-percent me-2"></i>Bill Discount
                        </h6>
                    </div>
                    <div class="card-body p-3">
                        <div class="row g-2">
                            <div class="col-8">
                                <label asp-for="BillDiscountPercentage" class="form-label fw-semibold small">
                                    Discount Percentage
                                </label>
                                <div class="input-group input-group-sm">
                                    <input asp-for="BillDiscountPercentage" type="number" class="form-control"
                                           min="0" max="100" step="0.1" value="0"
                                           onchange="updateSaleSummary()" onkeyup="updateSaleSummary()" />
                                    <span class="input-group-text">%</span>
                                </div>
                                <span asp-validation-for="BillDiscountPercentage" class="text-danger small"></span>
                            </div>
                            <div class="col-4">
                                <label class="form-label fw-semibold small">Discount Amount</label>
                                <div class="fw-bold text-success fs-5" id="calculatedDiscount">₹0.00</div>
                            </div>
                        </div>
                        <small class="text-muted">
                            <i class="fas fa-info-circle me-1"></i>
                            This discount will be applied to the entire bill after GST calculation
                        </small>
                    </div>
                </div>
            </div>

            <!-- Right Column - Sale Items List -->
            <div class="col-lg-7">
                <!-- Sale Items Card -->
                <div class="card border-0 shadow-sm">
                    <div class="card-header bg-info text-white py-2">
                        <div class="d-flex justify-content-between align-items-center">
                            <h6 class="mb-0">
                                <i class="fas fa-shopping-cart me-2"></i>Sale Items (<span id="totalItems">0</span>)
                            </h6>
                            <button type="button" class="btn btn-sm btn-outline-light" onclick="clearAllItems()">
                                <i class="fas fa-trash me-1"></i>Clear All
                            </button>
                        </div>
                    </div>
                    <div class="card-body p-0">
                        <!-- Sale Items Table -->
                        <div class="table-responsive" style="max-height: 400px; overflow-y: auto;">
                            <table class="table table-sm table-hover mb-0">
                                <thead class="table-light sticky-top">
                                    <tr>
                                        <th style="width: 40%">Product</th>
                                        <th class="text-center" style="width: 12%">Qty</th>
                                        <th class="text-end" style="width: 15%">Price</th>
                                        @* <th class="text-end" style="width: 10%">GST</th> *@
                                        <th class="text-end" style="width: 15%">Total</th>
                                        <th class="text-center" style="width: 8%">Action</th>
                                    </tr>
                                </thead>
                                <tbody id="saleItemsTable">
                                    <!-- Items will be added here dynamically -->
                                </tbody>
                            </table>
                        </div>

                        <!-- Empty State -->
                        <div id="emptyState" class="text-center py-5">
                            <i class="fas fa-shopping-cart fa-3x text-muted mb-3"></i>
                            <h5 class="text-muted">No items added yet</h5>
                            <p class="text-muted mb-0">Select a category and product to start adding items to the sale</p>
                        </div>
                    </div>

                    <!-- Sale Summary -->
                    <div class="card-footer bg-light">
                        <div class="row g-2 text-sm">
                            <div class="col-6 col-md-3">
                                <div class="text-center">
                                    <small class="text-muted d-block">Subtotal</small>
                                    <strong id="subtotalAmount">₹0.00</strong>
                                </div>
                            </div>
                            @* <div class="col-6 col-md-3">
                                <div class="text-center">
                                    <small class="text-muted d-block">GST</small>
                                    <strong id="gstAmount" class="text-info">₹0.00</strong>
                                </div>
                            </div> *@
                            <div class="col-6 col-md-3">
                                <div class="text-center">
                                    <small class="text-muted d-block">Discount</small>
                                    <strong id="discountAmount" class="text-success">₹0.00</strong>
                                </div>
                            </div>
                            <div class="col-6 col-md-3">
                                <div class="text-center">
                                    <small class="text-muted d-block">Final Amount</small>
                                    <strong id="totalAmount" class="text-primary fs-5">₹0.00</strong>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Process Sale Button -->
                <div class="d-grid gap-2 mt-3">
                    <button type="submit" class="btn btn-primary btn-lg" id="processSaleBtn" disabled>
                        <i class="fas fa-credit-card me-2"></i>Process Sale
                    </button>
                    <small class="text-center text-muted">
                        Add at least one item to enable sale processing
                    </small>
                </div>
            </div>
        </div>
    </form>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        // Global variables
        let saleItems = [];
        let selectedProduct = null;

        $(document).ready(function() {
            updateSaleSummary();
            $('#SaleDate').val(new Date().toISOString().slice(0, 16));
        });

        // Load products by category - UNCHANGED
        async function loadProductsByCategory() {
            const categoryId = $('#categorySelect').val();
            const productSelect = $('#productSelect');

            productSelect.empty().append('<option value="">-- Loading Products... --</option>').prop('disabled', true);
            $('#productDetails').hide();
            $('#addToCartBtn').prop('disabled', true);
            selectedProduct = null;

            if (!categoryId) {
                productSelect.empty().append('<option value="">-- First Select Category --</option>');
                return;
            }

            try {
                const response = await fetch(`/Sales/GetProductsByCategory?categoryId=${categoryId}`);
                const products = await response.json();

                productSelect.empty().append('<option value="">-- Select Product --</option>');

                if (products && products.length > 0) {
                    products.forEach(product => {
                        productSelect.append(`<option value="${product.id}">${product.name} (₹${product.price}) - Stock: ${product.stock}</option>`);
                    });
                    productSelect.prop('disabled', false);
                } else {
                    productSelect.append('<option value="">-- No Products Available --</option>');
                }
            } catch (error) {
                console.error('Error loading products:', error);
                productSelect.empty().append('<option value="">-- Error Loading Products --</option>');
            }
        }

        // Load product details - UNCHANGED
        async function loadProductDetails() {
            const productId = $('#productSelect').val();

            if (!productId) {
                $('#productDetails').hide();
                $('#addToCartBtn').prop('disabled', true);
                selectedProduct = null;
                return;
            }

            try {
                const response = await fetch(`/Sales/GetProductDetails?productId=${productId}`);
                const product = await response.json();

                if (product) {
                    selectedProduct = product;

                    $('#productPrice').text(`₹${product.price.toFixed(2)}`);
                    $('#productStock').text(product.stock);
                    // $('#productGST').text(`${product.gstRate}%`);
                    $('#saleQuantity').attr('max', product.stock).val(1);

                    $('#productDetails').show();
                    $('#addToCartBtn').prop('disabled', false);
                } else {
                    $('#productDetails').hide();
                    $('#addToCartBtn').prop('disabled', true);
                    selectedProduct = null;
                }
            } catch (error) {
                console.error('Error loading product details:', error);
                $('#productDetails').hide();
                $('#addToCartBtn').prop('disabled', true);
                selectedProduct = null;
            }
        }

        // Adjust quantity buttons - UNCHANGED
        function adjustQuantity(change) {
            const quantityInput = $('#saleQuantity');
            const currentQty = parseInt(quantityInput.val()) || 1;
            const maxQty = parseInt(quantityInput.attr('max')) || 1;
            const newQty = Math.max(1, Math.min(maxQty, currentQty + change));
            quantityInput.val(newQty);
        }

        // Add product to sale - UPDATED: No individual discount
        function addProductToSale() {
            if (!selectedProduct) {
                Swal.fire('Error', 'Please select a product first.', 'error');
                return;
            }

            const quantity = parseInt($('#saleQuantity').val()) || 1;

            if (quantity <= 0 || quantity > selectedProduct.stock) {
                Swal.fire('Error', 'Invalid quantity selected.', 'error');
                return;
            }

            // Check if product already exists in sale
            const existingIndex = saleItems.findIndex(item => item.productId === selectedProduct.id);

            if (existingIndex !== -1) {
                // Update existing item
                const existingItem = saleItems[existingIndex];
                const newQuantity = existingItem.quantity + quantity;

                if (newQuantity > selectedProduct.stock) {
                    Swal.fire('Error', `Cannot add more. Total quantity would exceed available stock (${selectedProduct.stock}).`, 'error');
                    return;
                }

                saleItems[existingIndex].quantity = newQuantity;
            } else {
                // Add new item - NO INDIVIDUAL DISCOUNT
                const saleItem = {
                    productId: selectedProduct.id,
                    productName: selectedProduct.name,
                    quantity: quantity,
                    unitPrice: selectedProduct.price
                    // gstRate: selectedProduct.gstRate
                };
                saleItems.push(saleItem);
            }

            updateSaleItemsTable();
            updateSaleSummary();
            clearProductSelection();

            Swal.fire({
                icon: 'success',
                title: 'Product Added!',
                text: `${selectedProduct.name} has been added to the sale.`,
                timer: 1500,
                showConfirmButton: false
            });
        }

        // Clear product selection - UNCHANGED
        function clearProductSelection() {
            $('#categorySelect').val('');
            $('#productSelect').empty().append('<option value="">-- First Select Category --</option>').prop('disabled', true);
            $('#productDetails').hide();
            $('#addToCartBtn').prop('disabled', true);
            selectedProduct = null;
        }

        // Update sale items table - UPDATED: No discount column
        function updateSaleItemsTable() {
            const tbody = $('#saleItemsTable');
            tbody.empty();

            if (saleItems.length === 0) {
                $('#emptyState').show();
                return;
            }

            $('#emptyState').hide();

            saleItems.forEach((item, index) => {
                const lineTotal = item.quantity * item.unitPrice;
                // const lineGST = lineSubtotal * (item.gstRate / 100);
                // const lineTotal = lineSubtotal + lineGST;

                const row = `
                    <tr>
                        <td>
                            <div>
                                <strong>${item.productName}</strong>
                                <br>
                                <small class="text-muted">ID: ${item.productId}</small>
                            </div>
                        </td>
                        <td class="text-center">
                            <div class="input-group input-group-sm" style="width: 80px; margin: 0 auto;">
                                <button type="button" class="btn btn-outline-secondary btn-sm" onclick="updateItemQuantity(${index}, -1)">
                                    <i class="fas fa-minus"></i>
                                </button>
                                <input type="text" class="form-control text-center" value="${item.quantity}" readonly>
                                <button type="button" class="btn btn-outline-secondary btn-sm" onclick="updateItemQuantity(${index}, 1)">
                                    <i class="fas fa-plus"></i>
                                </button>
                            </div>
                        </td>
                        <td class="text-end">₹${item.unitPrice.toFixed(2)}</td>
                        <td class="text-end"><strong>₹${lineTotal.toFixed(2)}</strong></td>
                        <td class="text-center">
                            <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeItem(${index})" title="Remove Item">
                                <i class="fas fa-trash"></i>
                            </button>
                        </td>
                    </tr>
                `;
                tbody.append(row);
            });
        }

        // Update item quantity - UNCHANGED
        function updateItemQuantity(index, change) {
            const item = saleItems[index];
            const newQuantity = Math.max(1, item.quantity + change);
            saleItems[index].quantity = newQuantity;

            updateSaleItemsTable();
            updateSaleSummary();
        }

        // Remove item - UNCHANGED
        function removeItem(index) {
            Swal.fire({
                title: 'Remove Item?',
                text: `Remove ${saleItems[index].productName} from the sale?`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#dc3545',
                confirmButtonText: 'Yes, Remove'
            }).then((result) => {
                if (result.isConfirmed) {
                    saleItems.splice(index, 1);
                    updateSaleItemsTable();
                    updateSaleSummary();

                    Swal.fire('Removed!', 'Item has been removed from the sale.', 'success');
                }
            });
        }

        // Clear all items - UNCHANGED
        function clearAllItems() {
            if (saleItems.length === 0) return;

            Swal.fire({
                title: 'Clear All Items?',
                text: 'This will remove all items from the current sale.',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#dc3545',
                confirmButtonText: 'Yes, Clear All'
            }).then((result) => {
                if (result.isConfirmed) {
                    saleItems = [];
                    updateSaleItemsTable();
                    updateSaleSummary();

                    Swal.fire('Cleared!', 'All items have been removed.', 'success');
                }
            });
        }

        // Update sale summary - UPDATED: Bill-level discount calculation
        function updateSaleSummary() {
            let subtotal = 0;
            // let totalGST = 0;

            saleItems.forEach(item => {
                const lineSubtotal = item.quantity * item.unitPrice;
                // const lineGST = lineSubtotal * (item.gstRate / 100);

                subtotal += lineSubtotal;
                // totalGST += lineGST;
            });

            // Calculate bill-level discount
            const discountPercentage = parseFloat($('#BillDiscountPercentage').val()) || 0;
            // const totalBeforeDiscount = subtotal + totalGST;
            const totalBeforeDiscount = subtotal;
            const discountAmount = totalBeforeDiscount * (discountPercentage / 100);
            const finalAmount = totalBeforeDiscount - discountAmount;

            // Update display
            $('#totalItems').text(saleItems.length);
            $('#subtotalAmount').text(`₹${subtotal.toFixed(2)}`);
            // $('#gstAmount').text(`₹${totalGST.toFixed(2)}`);
            $('#discountAmount').text(`₹${discountAmount.toFixed(2)}`);
            $('#calculatedDiscount').text(`₹${discountAmount.toFixed(2)}`);
            $('#totalAmount').text(`₹${finalAmount.toFixed(2)}`);

            // Enable/disable process sale button
            $('#processSaleBtn').prop('disabled', saleItems.length === 0);
        }

        // Form submission - UPDATED: New customer and discount handling
        $('#saleForm').on('submit', function(e) {
            console.log('Tarun');
            e.preventDefault();

            if (saleItems.length === 0) {
                Swal.fire('Error', 'Please add at least one item to the sale.', 'error');
                return;
            }

            // Validate customer mobile format if provided
            const customerMobile = $('#CustomerPhone').val().trim();
            if (customerMobile && !/^[\d\-\+\(\)\s]{10,20}$/.test(customerMobile)) {
                Swal.fire('Error', 'Please enter a valid mobile number.', 'error');
                $('#CustomerMobile').focus();
                return;
            }

            // Create form data
            const formData = new FormData();
            formData.append('SaleDate', $('#SaleDate').val());
            formData.append('PaymentMethod', $('#PaymentMethod').val());

            // Customer info
            const customerName = $('#CustomerName').val().trim();
            if (customerName) {
                formData.append('CustomerName', customerName);
            }
            if (customerMobile) {
                formData.append('CustomerPhone', customerMobile);
            }

            // Bill discount
            formData.append('BillDiscountPercentage', $('#BillDiscountPercentage').val());

            // Add sale items (without individual discounts)
            saleItems.forEach((item, index) => {
                formData.append(`SaleItems[${index}].ProductId`, item.productId);
                formData.append(`SaleItems[${index}].Quantity`, item.quantity);
                formData.append(`SaleItems[${index}].UnitPrice`, item.unitPrice);
            });

            // Add CSRF token
            const token = $('input[name="__RequestVerificationToken"]').val();
            if (token) {
                formData.append('__RequestVerificationToken', token);
            }

            // Show processing state
            $('#processSaleBtn').prop('disabled', true).html('<i class="fas fa-spinner fa-spin me-2"></i>Processing Sale...');

            // Submit form
            fetch('/Sales/Create', {
                method: 'POST',
                body: formData
            }).then(response => {
                if (response.ok) {
                    Swal.fire('Success!', 'Sale has been processed successfully.', 'success').then(() => {
                        window.location.href = response.url;
                    });
                } else {
                    throw new Error('Sale processing failed');
                }
            }).catch(error => {
                console.error('Error:', error);
                Swal.fire('Error', 'Failed to process sale. Please try again.', 'error');
                $('#processSaleBtn').prop('disabled', false).html('<i class="fas fa-credit-card me-2"></i>Process Sale');
            });
        });
    </script>

    <!-- Include SweetAlert2 -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <style>
        .page-title {
            font-weight: 600;
            margin-bottom: 0;
        }

        .card {
            border-radius: 8px;
        }

        .card-header {
            border-radius: 8px 8px 0 0 !important;
            font-weight: 600;
        }

        .table-sm th,
        .table-sm td {
            padding: 0.5rem 0.5rem;
            vertical-align: middle;
        }

        .form-control-sm,
        .form-select-sm {
            font-size: 0.875rem;
        }

        .input-group-sm .btn {
            font-size: 0.75rem;
        }

        #emptyState {
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        }

        .sticky-top {
            top: 0;
            z-index: 1020;
        }

        .text-sm {
            font-size: 0.875rem;
        }

        @@media (max-width: 768px) {
            .container-fluid {
                padding: 0.5rem;
            }

            .card-body {
                padding: 1rem;
            }

            .table-responsive {
                font-size: 0.8rem;
            }
        }
    </style>
}