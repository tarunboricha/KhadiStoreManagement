@model KhadiStore.Application.DTOs.PurchaseDto
@{
    ViewData["Title"] = "Purchase Order Details";
}

<div class="row mb-4">
    <div class="col">
        <h1 class="page-title text-primary">
            <i class="fas fa-shopping-cart me-2 text-info"></i>
            Purchase Order - @Model.PurchaseOrderNumber
            <small class="text-muted fs-6 ms-2">| खरीद आदेश विवरण</small>
        </h1>
    </div>
    <div class="col-auto">
        <div class="btn-group">
            <a href="@Url.Action("Index")" class="btn btn-outline-secondary">
                <i class="fas fa-arrow-left me-1"></i> Back to Orders
            </a>
            @if (Model.CanReceive)
            {
                <button class="btn btn-success" onclick="receivePurchase(@Model.Id, '@Model.PurchaseOrderNumber')">
                    <i class="fas fa-truck-loading me-1"></i> Receive Order
                </button>
            }
            @if (Model.CanCancel)
            {
                <button class="btn btn-warning" onclick="cancelPurchase(@Model.Id, '@Model.PurchaseOrderNumber')">
                    <i class="fas fa-ban me-1"></i> Cancel Order
                </button>
            }
            @if (Model.Status == "Ordered" && !Model.IsReceived)
            {
                <button class="btn btn-danger" onclick="deletePurchase(@Model.Id, '@Model.PurchaseOrderNumber')">
                    <i class="fas fa-trash me-1"></i> Delete Order
                </button>
            }
        </div>
    </div>
</div>

<!-- Success/Error Alerts -->
@if (TempData["Success"] != null)
{
    <div class="alert alert-success border-0 shadow-sm" role="alert">
        <div class="d-flex align-items-center">
            <i class="fas fa-check-circle fa-2x me-3 text-success"></i>
            <div>
                <h5 class="alert-heading mb-1">Success!</h5>
                <p class="mb-0">@TempData["Success"]</p>
            </div>
        </div>
    </div>
}

@if (TempData["Error"] != null)
{
    <div class="alert alert-danger border-0 shadow-sm" role="alert">
        <div class="d-flex align-items-center">
            <i class="fas fa-exclamation-triangle fa-2x me-3 text-danger"></i>
            <div>
                <h5 class="alert-heading mb-1">Error!</h5>
                <p class="mb-0">@TempData["Error"]</p>
            </div>
        </div>
    </div>
}

<div class="row">
    <div class="col-lg-8">
        <!-- Purchase Order Information -->
        <div class="card border-0 shadow-sm mb-4">
            <div class="card-header" style="background: linear-gradient(135deg, #17a2b8 0%, #138496 100%);">
                <div class="d-flex justify-content-between align-items-center">
                    <h5 class="mb-0 text-white">
                        <i class="fas fa-info-circle me-2"></i>Purchase Order Information | खरीद आदेश जानकारी
                    </h5>
                    @if (Model.Status == "Ordered")
                    {
                        <div class="dropdown">
                            <button class="btn btn-light btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                <i class="fas fa-edit me-1"></i> Change Status
                            </button>
                            <ul class="dropdown-menu dropdown-menu-end">
                                @foreach (var status in Model.AvailableStatuses)
                                {
                                    @if (status != Model.Status)
                                    {
                                        <li>
                                            <a class="dropdown-item" href="#" onclick="changeOrderStatus('@status')">
                                                <i class="fas fa-@(status == "Received" ? "check" : status == "Cancelled" ? "times" : "clock") me-2"></i>
                                                Mark as @status
                                            </a>
                                        </li>
                                    }
                                }
                            </ul>
                        </div>
                    }
                </div>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-lg-6">
                        <div class="purchase-info-grid">
                            <div class="info-item mb-3">
                                <div class="d-flex align-items-center">
                                    <i class="fas fa-hashtag fa-2x text-primary me-3"></i>
                                    <div>
                                        <small class="text-muted">Purchase Order Number</small>
                                        <div class="fw-bold fs-5 text-primary">@Model.PurchaseOrderNumber</div>
                                    </div>
                                </div>
                            </div>
                            <div class="info-item mb-3">
                                <div class="d-flex align-items-center">
                                    <i class="fas fa-calendar fa-2x text-info me-3"></i>
                                    <div>
                                        <small class="text-muted">Purchase Date</small>
                                        <div class="fw-bold">@Model.PurchaseDate.ToString("dd MMM yyyy, hh:mm tt")</div>
                                    </div>
                                </div>
                            </div>
                            <div class="info-item">
                                <div class="d-flex align-items-center">
                                    <i class="fas fa-flag fa-2x me-3 @(Model.Status == "Received" ? "text-success" : Model.Status == "Cancelled" ? "text-danger" : "text-warning")"></i>
                                    <div>
                                        <small class="text-muted">Status</small>
                                        <div>
                                            @switch (Model.Status)
                                            {
                                                case "Ordered":
                                                    <span class="badge bg-warning text-dark fs-6 px-3 py-2">
                                                        <i class="fas fa-clock me-1"></i>@Model.Status
                                                    </span>
                                                    break;
                                                case "Received":
                                                    <span class="badge bg-success fs-6 px-3 py-2">
                                                        <i class="fas fa-check me-1"></i>@Model.Status
                                                    </span>
                                                    break;
                                                case "Cancelled":
                                                    <span class="badge bg-danger fs-6 px-3 py-2">
                                                        <i class="fas fa-times me-1"></i>@Model.Status
                                                    </span>
                                                    break;
                                                default:
                                                    <span class="badge bg-secondary fs-6 px-3 py-2">@Model.Status</span>
                                                    break;
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="purchase-info-grid">
                            <div class="info-item mb-3">
                                <div class="d-flex align-items-center">
                                    <i class="fas fa-user fa-2x text-secondary me-3"></i>
                                    <div>
                                        <small class="text-muted">Created On</small>
                                        <div class="fw-bold">@Model.CreatedAt.ToString("dd MMM yyyy, hh:mm tt")</div>
                                    </div>
                                </div>
                            </div>
                            <div class="info-item mb-3">
                                <div class="d-flex align-items-center">
                                    <i class="fas fa-boxes fa-2x text-warning me-3"></i>
                                    <div>
                                        <small class="text-muted">Total Items</small>
                                        <div class="fw-bold fs-5 text-warning">@Model.TotalItems</div>
                                    </div>
                                </div>
                            </div>
                            <div class="info-item">
                                <div class="d-flex align-items-center">
                                    <i class="fas fa-edit fa-2x text-info me-3"></i>
                                    <div>
                                        <small class="text-muted">Last Updated</small>
                                        <div class="fw-bold">
                                            @if (Model.UpdatedAt.HasValue)
                                            {
                                                @Model.UpdatedAt.Value.ToString("dd MMM yyyy, hh:mm tt")
                                            }
                                            else
                                            {
                                                <text>Never</text>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                @if (!string.IsNullOrWhiteSpace(Model.Notes))
                {
                    <div class="mt-4 pt-3 border-top">
                        <h6 class="text-muted mb-2">
                            <i class="fas fa-sticky-note me-1"></i>Purchase Notes:
                        </h6>
                        <div class="border rounded p-3 bg-light">
                            <div class="small">@Html.Raw(Model.Notes.Replace("\n", "<br>"))</div>
                        </div>
                    </div>
                }
            </div>
        </div>

        <!-- Supplier Information -->
        <div class="card border-0 shadow-sm mb-4">
            <div class="card-header" style="background: linear-gradient(135deg, #FF6B35 0%, #F7931E 100%);">
                <h5 class="mb-0 text-white">
                    <i class="fas fa-truck me-2"></i>Supplier Information | आपूर्तिकर्ता जानकारी
                </h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-8">
                        <div class="supplier-profile d-flex align-items-center">
                            <div class="avatar-circle me-4">
                                <i class="fas fa-building fa-2x text-white"></i>
                            </div>
                            <div>
                                <div class="mb-2">
                                    <small class="text-muted">Supplier Name</small>
                                    <div class="fw-bold fs-5">
                                        <a href="@Url.Action("Details", "Suppliers", new { id = Model.SupplierId })"
                                           class="text-decoration-none text-primary">
                                            @Model.SupplierName
                                        </a>
                                    </div>
                                </div>
                                @if (!string.IsNullOrWhiteSpace(Model.SupplierPhone))
                                {
                                    <div class="mb-1">
                                        <small class="text-muted">Phone Number</small>
                                        <div class="fw-semibold">
                                            <i class="fas fa-phone text-success me-1"></i>@Model.SupplierPhone
                                            <a href="tel:@Model.SupplierPhone" class="btn btn-sm btn-outline-success ms-2">
                                                <i class="fas fa-phone me-1"></i>Call
                                            </a>
                                        </div>
                                    </div>
                                }
                                @if (!string.IsNullOrWhiteSpace(Model.SupplierEmail))
                                {
                                    <div>
                                        <small class="text-muted">Email Address</small>
                                        <div class="fw-semibold">
                                            <i class="fas fa-envelope text-info me-1"></i>
                                            <a href="mailto:@Model.SupplierEmail" class="text-decoration-none">@Model.SupplierEmail</a>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4 text-end">
                        <a href="@Url.Action("Details", "Suppliers", new { id = Model.SupplierId })"
                           class="btn btn-outline-primary">
                            <i class="fas fa-user-circle me-1"></i> View Supplier Profile
                        </a>
                        <a href="@Url.Action("Create", new { supplierId = Model.SupplierId })"
                           class="btn btn-outline-success mt-2">
                            <i class="fas fa-plus me-1"></i> New Order from Supplier
                        </a>
                    </div>
                </div>
            </div>
        </div>

        <!-- Purchase Items -->
        <div class="card border-0 shadow-sm">
            <div class="card-header" style="background: linear-gradient(135deg, #6f42c1 0%, #8e44ad 100%);">
                <div class="d-flex justify-content-between align-items-center">
                    <h5 class="mb-0 text-white">
                        <i class="fas fa-box me-2"></i>Purchase Items | खरीदे गए आइटम (@Model.PurchaseItems.Count items)
                    </h5>
                    @if (Model.Status == "Ordered")
                    {
                        <button class="btn btn-light btn-sm" onclick="receivePurchase(@Model.Id, '@Model.PurchaseOrderNumber')">
                            <i class="fas fa-truck-loading me-1"></i> Receive All Items
                        </button>
                    }
                </div>
            </div>
            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="table table-hover mb-0">
                        <thead class="table-light">
                            <tr>
                                <th style="width: 35%">
                                    <i class="fas fa-tag text-primary me-1"></i>Product
                                </th>
                                <th class="text-center" style="width: 10%">
                                    <i class="fas fa-boxes text-success me-1"></i>Qty
                                </th>
                                <th class="text-end" style="width: 15%">
                                    <i class="fas fa-rupee-sign text-info me-1"></i>Unit Price
                                </th>
                                <th class="text-end" style="width: 8%">
                                    <i class="fas fa-percent text-secondary me-1"></i>GST %
                                </th>
                                <th class="text-end" style="width: 12%">
                                    <i class="fas fa-coins text-warning me-1"></i>GST Amount
                                </th>
                                <th class="text-end" style="width: 20%">
                                    <i class="fas fa-calculator text-danger me-1"></i>Line Total
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model.PurchaseItems)
                            {
                                <tr class="align-middle">
                                    <td>
                                        <div class="product-info">
                                            <div class="fw-semibold text-dark">@item.ProductName</div>
                                            <small class="text-muted">
                                                <i class="fas fa-barcode me-1"></i>Product ID: @item.ProductId
                                            </small>
                                        </div>
                                    </td>
                                    <td class="text-center">
                                        <span class="badge bg-light text-dark border fs-6 px-3 py-2">@item.Quantity</span>
                                    </td>
                                    <td class="text-end">
                                        <strong>₹@item.UnitPrice.ToString("N2")</strong>
                                    </td>
                                    <td class="text-end">
                                        <span class="text-info fw-semibold">@item.GSTRate.ToString("N1")%</span>
                                    </td>
                                    <td class="text-end">
                                        <span class="text-warning fw-semibold">₹@item.GSTAmount.ToString("N2")</span>
                                    </td>
                                    <td class="text-end">
                                        <strong class="fs-6 text-success">₹@item.LineTotal.ToString("N2")</strong>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <!-- Summary & Actions Sidebar -->
    <div class="col-lg-4">
        <!-- Purchase Summary -->
        <div class="card border-0 shadow-sm mb-4">
            <div class="card-header" style="background: linear-gradient(135deg, #28a745 0%, #20c997 100%);">
                <h5 class="mb-0 text-white">
                    <i class="fas fa-calculator me-2"></i>Purchase Summary
                </h5>
            </div>
            <div class="card-body">
                <div class="summary-section">
                    <div class="summary-item d-flex justify-content-between py-2">
                        <span><i class="fas fa-calculator text-info me-2"></i>Subtotal:</span>
                        <span class="fw-semibold">₹@Model.SubTotal.ToString("N2")</span>
                    </div>
                    <div class="summary-item d-flex justify-content-between py-2">
                        <span><i class="fas fa-percent text-warning me-2"></i>GST Amount:</span>
                        <span class="fw-semibold">₹@Model.GSTAmount.ToString("N2")</span>
                    </div>
                    <hr class="my-3">
                    <div class="summary-item d-flex justify-content-between py-2">
                        <strong class="fs-5 text-success">
                            <i class="fas fa-rupee-sign me-2"></i>Total Amount:
                        </strong>
                        <strong class="fs-4 text-success">₹@Model.TotalAmount.ToString("N2")</strong>
                    </div>
                </div>
            </div>
        </div>

        <!-- Quick Actions -->
        <div class="card border-0 shadow-sm mb-4">
            <div class="card-header" style="background: linear-gradient(135deg, #dc3545 0%, #c82333 100%);">
                <h5 class="mb-0 text-white">
                    <i class="fas fa-cogs me-2"></i>Quick Actions
                </h5>
            </div>
            <div class="card-body">
                <div class="d-grid gap-2">
                    @if (Model.CanReceive)
                    {
                        <button class="btn btn-success" onclick="receivePurchase(@Model.Id, '@Model.PurchaseOrderNumber')">
                            <i class="fas fa-truck-loading me-1"></i> Receive Order
                        </button>
                    }
                    @if (Model.CanCancel)
                    {
                        <button class="btn btn-warning" onclick="cancelPurchase(@Model.Id, '@Model.PurchaseOrderNumber')">
                            <i class="fas fa-ban me-1"></i> Cancel Order
                        </button>
                    }
                    <a href="@Url.Action("Create", new { supplierId = Model.SupplierId })" class="btn btn-info">
                        <i class="fas fa-plus me-1"></i> New Order from Supplier
                    </a>
                    <a href="@Url.Action("Index")" class="btn btn-outline-secondary">
                        <i class="fas fa-list me-1"></i> View All Orders
                    </a>
                    @if (Model.Status == "Ordered")
                    {
                        <button class="btn btn-outline-danger" onclick="deletePurchase(@Model.Id, '@Model.PurchaseOrderNumber')">
                            <i class="fas fa-trash me-1"></i> Delete Order
                        </button>
                    }
                </div>
            </div>
        </div>

        <!-- Order Status Timeline -->
        <div class="card border-0 shadow-sm mb-4">
            <div class="card-header bg-light">
                <h6 class="mb-0 text-dark">
                    <i class="fas fa-history me-2"></i>Order Timeline | आदेश समयरेखा
                </h6>
            </div>
            <div class="card-body">
                <div class="timeline">
                    <div class="timeline-item completed">
                        <div class="timeline-marker bg-success">
                            <i class="fas fa-plus text-white"></i>
                        </div>
                        <div class="timeline-content">
                            <h6 class="mb-1">Order Created</h6>
                            <small class="text-muted">@Model.CreatedAt.ToString("dd MMM yyyy, hh:mm tt")</small>
                        </div>
                    </div>

                    @if (Model.Status == "Received")
                    {
                        <div class="timeline-item completed">
                            <div class="timeline-marker bg-success">
                                <i class="fas fa-check text-white"></i>
                            </div>
                            <div class="timeline-content">
                                <h6 class="mb-1">Order Received</h6>
                                <small class="text-muted">
                                    @if (Model.UpdatedAt.HasValue)
                                    {
                                        @Model.UpdatedAt.Value.ToString("dd MMM yyyy, hh:mm tt")
                                    }
                                </small>
                                <div><small class="text-success">Stock updated successfully</small></div>
                            </div>
                        </div>
                    }
                    else if (Model.Status == "Cancelled")
                    {
                        <div class="timeline-item cancelled">
                            <div class="timeline-marker bg-danger">
                                <i class="fas fa-times text-white"></i>
                            </div>
                            <div class="timeline-content">
                                <h6 class="mb-1">Order Cancelled</h6>
                                <small class="text-muted">
                                    @if (Model.UpdatedAt.HasValue)
                                    {
                                        @Model.UpdatedAt.Value.ToString("dd MMM yyyy, hh:mm tt")
                                    }
                                </small>
                                <div><small class="text-danger">Order was cancelled</small></div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="timeline-item pending">
                            <div class="timeline-marker bg-warning">
                                <i class="fas fa-clock text-white"></i>
                            </div>
                            <div class="timeline-content">
                                <h6 class="mb-1">Pending Receipt</h6>
                                <small class="text-muted">Waiting for items to arrive</small>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Quick Stats -->
        <div class="card border-0 shadow-sm">
            <div class="card-header bg-light">
                <h6 class="mb-0 text-dark">
                    <i class="fas fa-chart-bar me-2"></i>Order Insights | आदेश अंतर्दृष्टि
                </h6>
            </div>
            <div class="card-body">
                <div class="row text-center g-3 mb-3">
                    <div class="col-6">
                        <div class="stat-box p-3 rounded" style="background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%);">
                            <div class="h4 text-primary mb-1">@Model.PurchaseItems.Count()</div>
                            <small class="text-muted">Product Types</small>
                        </div>
                    </div>
                    <div class="col-6">
                        <div class="stat-box p-3 rounded" style="background: linear-gradient(135deg, #e8f5e8 0%, #c8e6c9 100%);">
                            <div class="h4 text-success mb-1">@Model.TotalItems</div>
                            <small class="text-muted">Total Quantity</small>
                        </div>
                    </div>
                </div>

                <div class="purchase-metrics">
                    <div class="d-flex justify-content-between py-1">
                        <span class="small text-muted">Avg Item Price:</span>
                        <span class="small fw-semibold">₹@((Model.SubTotal / Math.Max(Model.TotalItems, 1)).ToString("N0"))</span>
                    </div>
                    <div class="d-flex justify-content-between py-1">
                        <span class="small text-muted">GST Percentage:</span>
                        <span class="small fw-semibold">@((Model.SubTotal > 0 ? (Model.GSTAmount / Model.SubTotal * 100) : 0).ToString("N1"))%</span>
                    </div>
                    <div class="d-flex justify-content-between py-1">
                        <span class="small text-muted">Days Since Order:</span>
                        <span class="small fw-semibold">@((DateTime.Now - Model.PurchaseDate).Days) days</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Auto-hide success/error alerts after 5 seconds
            setTimeout(function() {
                $('.alert-success, .alert-danger').fadeOut('slow');
            }, 5000);

            // Animate elements on page load
            $('.card').each(function(i) {
                $(this).css('opacity', '0').animate({
                    opacity: 1
                }, 300 + (i * 100));
            });

            // Initialize tooltips
            $('[title]').tooltip();
        });

        function changeOrderStatus(newStatus) {
            const currentStatus = '@Model.Status';
            const orderNumber = '@Model.PurchaseOrderNumber';

            let confirmText = '';
            let alertType = 'question';

            switch(newStatus) {
                case 'Received':
                    confirmText = `Mark order ${orderNumber} as received? This will update inventory stock levels.`;
                    alertType = 'success';
                    break;
                case 'Cancelled':
                    confirmText = `Cancel order ${orderNumber}? This action can be reversed later if needed.`;
                    alertType = 'warning';
                    break;
                default:
                    confirmText = `Change order ${orderNumber} status to ${newStatus}?`;
                    break;
            }

            Swal.fire({
                title: `Change Status to ${newStatus}?`,
                text: confirmText,
                icon: alertType,
                showCancelButton: true,
                confirmButtonColor: newStatus === 'Received' ? '#28a745' : newStatus === 'Cancelled' ? '#dc3545' : '#007bff',
                cancelButtonColor: '#6c757d',
                confirmButtonText: `Yes, ${newStatus}`,
                cancelButtonText: 'Cancel'
            }).then((result) => {
                if (result.isConfirmed) {
                    const form = $('<form>', {
                        'method': 'POST',
                        'action': '@Url.Action("UpdateStatus")'
                    });

                    form.append($('<input>', { 'type': 'hidden', 'name': 'purchaseId', 'value': @Model.Id }));
                    form.append($('<input>', { 'type': 'hidden', 'name': 'newStatus', 'value': newStatus }));
                    form.append($('<input>', { 'type': 'hidden', 'name': 'reason', 'value': `Status changed to ${newStatus}` }));
                    form.append($('@Html.AntiForgeryToken()'));

                    $('body').append(form);
                    form.submit();
                }
            });
        }

        function receivePurchase(purchaseId, poNumber) {
            Swal.fire({
                title: 'Receive Purchase Order?',
                html: `
                    <div class="text-start">
                        <p>Mark purchase order <strong>${poNumber}</strong> as received?</p>
                        <div class="alert alert-info">
                            <i class="fas fa-info-circle me-1"></i>
                            This will update product stock quantities and cannot be undone easily.
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Receiving Notes (Optional)</label>
                            <textarea class="form-control" id="receiveNotes" rows="3" placeholder="Enter any notes about the received items..."></textarea>
                        </div>
                    </div>
                `,
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#28a745',
                cancelButtonColor: '#6c757d',
                confirmButtonText: '<i class="fas fa-truck-loading me-1"></i> Receive Order',
                cancelButtonText: 'Cancel'
            }).then((result) => {
                if (result.isConfirmed) {
                    const notes = document.getElementById('receiveNotes').value;

                    const form = $('<form>', {
                        'method': 'POST',
                        'action': '@Url.Action("Receive")'
                    });

                    form.append($('<input>', { 'type': 'hidden', 'name': 'id', 'value': purchaseId }));
                    form.append($('<input>', { 'type': 'hidden', 'name': 'notes', 'value': notes }));
                    form.append($('@Html.AntiForgeryToken()'));

                    $('body').append(form);
                    form.submit();
                }
            });
        }

        function cancelPurchase(purchaseId, poNumber) {
            Swal.fire({
                title: 'Cancel Purchase Order?',
                html: `
                    <div class="text-start">
                        <p>Cancel purchase order <strong>${poNumber}</strong>?</p>
                        <div class="alert alert-warning">
                            <i class="fas fa-exclamation-triangle me-1"></i>
                            This action can be reversed later if needed.
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Cancellation Reason</label>
                            <textarea class="form-control" id="cancelReason" rows="3" placeholder="Enter reason for cancellation..." required></textarea>
                        </div>
                    </div>
                `,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#dc3545',
                cancelButtonColor: '#6c757d',
                confirmButtonText: '<i class="fas fa-ban me-1"></i> Cancel Order',
                cancelButtonText: 'Keep Order'
            }).then((result) => {
                if (result.isConfirmed) {
                    const reason = document.getElementById('cancelReason').value;
                    if (!reason.trim()) {
                        Swal.fire('Error', 'Please provide a reason for cancellation.', 'error');
                        return;
                    }

                    const form = $('<form>', {
                        'method': 'POST',
                        'action': '@Url.Action("Cancel")'
                    });

                    form.append($('<input>', { 'type': 'hidden', 'name': 'id', 'value': purchaseId }));
                    form.append($('<input>', { 'type': 'hidden', 'name': 'reason', 'value': reason }));
                    form.append($('@Html.AntiForgeryToken()'));

                    $('body').append(form);
                    form.submit();
                }
            });
        }

        function deletePurchase(purchaseId, poNumber) {
            Swal.fire({
                title: 'Delete Purchase Order?',
                html: `
                    <div class="text-start">
                        <p>Permanently delete purchase order <strong>${poNumber}</strong>?</p>
                        <div class="alert alert-danger">
                            <i class="fas fa-exclamation-triangle me-1"></i>
                            <strong>Warning:</strong> This action cannot be undone and will permanently remove all order data.
                        </div>
                    </div>
                `,
                icon: 'error',
                showCancelButton: true,
                confirmButtonColor: '#dc3545',
                cancelButtonColor: '#6c757d',
                confirmButtonText: '<i class="fas fa-trash me-1"></i> Delete Permanently',
                cancelButtonText: 'Keep Order'
            }).then((result) => {
                if (result.isConfirmed) {
                    const form = $('<form>', {
                        'method': 'POST',
                        'action': '@Url.Action("Delete")'
                    });

                    form.append($('<input>', { 'type': 'hidden', 'name': 'id', 'value': purchaseId }));
                    form.append($('@Html.AntiForgeryToken()'));

                    $('body').append(form);
                    form.submit();
                }
            });
        }
    </script>

    <!-- SweetAlert2 -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <style>
        .info-item:hover {
            transform: translateX(3px);
            transition: transform 0.2s ease;
        }

        .stat-box:hover {
            transform: translateY(-2px);
            transition: transform 0.2s ease;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }

        .avatar-circle {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            background: linear-gradient(135deg, #FF6B35 0%, #F7931E 100%);
        }

        .summary-item {
            border-bottom: 1px solid #f8f9fa;
        }

        .summary-item:last-child {
            border-bottom: none;
        }

        .timeline {
            position: relative;
            padding-left: 2rem;
        }

        .timeline::before {
            content: '';
            position: absolute;
            left: 1rem;
            top: 0;
            bottom: 0;
            width: 2px;
            background: #e9ecef;
        }

        .timeline-item {
            position: relative;
            margin-bottom: 2rem;
        }

        .timeline-marker {
            position: absolute;
            left: -2rem;
            width: 2rem;
            height: 2rem;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            border: 3px solid white;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .timeline-content {
            margin-left: 1rem;
        }

        .product-info:hover {
            transform: translateX(5px);
            transition: transform 0.2s ease;
        }

        .purchase-info-grid .info-item {
            transition: all 0.2s ease;
        }

        .purchase-info-grid .info-item:hover {
            background: rgba(255, 107, 53, 0.05);
            border-radius: 8px;
            padding: 8px;
            margin: -8px;
        }
    </style>
}